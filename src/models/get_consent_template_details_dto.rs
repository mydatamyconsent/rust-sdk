/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetConsentTemplateDetailsDto {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "consentPurpose", skip_serializing_if = "Option::is_none")]
    pub consent_purpose: Option<String>,
    #[serde(rename = "collectables", skip_serializing_if = "Option::is_none")]
    pub collectables: Option<Vec<crate::models::CollectibleTypes>>,
    #[serde(rename = "fetchType", skip_serializing_if = "Option::is_none")]
    pub fetch_type: Option<crate::models::FetchTypes>,
    #[serde(rename = "shortId", skip_serializing_if = "Option::is_none")]
    pub short_id: Option<String>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    #[serde(rename = "createdAtUtc", skip_serializing_if = "Option::is_none")]
    pub created_at_utc: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "templateType", skip_serializing_if = "Option::is_none")]
    pub template_type: Option<crate::models::ConsentTemplateTypes>,
    #[serde(rename = "dataLife", skip_serializing_if = "Option::is_none")]
    pub data_life: Option<Box<crate::models::Life>>,
    #[serde(rename = "requestLife", skip_serializing_if = "Option::is_none")]
    pub request_life: Option<Box<crate::models::Life>>,
    #[serde(rename = "frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<Box<crate::models::Life>>,
    #[serde(rename = "identity", skip_serializing_if = "Option::is_none")]
    pub identity: Option<Vec<crate::models::IdentitySupportedFields>>,
    #[serde(rename = "documents", skip_serializing_if = "Option::is_none")]
    pub documents: Option<Vec<crate::models::Document>>,
    #[serde(rename = "financials", skip_serializing_if = "Option::is_none")]
    pub financials: Option<Vec<crate::models::Financial>>,
    #[serde(rename = "healthRecords", skip_serializing_if = "Option::is_none")]
    pub health_records: Option<Vec<serde_json::Value>>,
    #[serde(rename = "approvedBy", skip_serializing_if = "Option::is_none")]
    pub approved_by: Option<String>,
    #[serde(rename = "approvedAtUtc", skip_serializing_if = "Option::is_none")]
    pub approved_at_utc: Option<String>,
}

impl GetConsentTemplateDetailsDto {
    pub fn new() -> GetConsentTemplateDetailsDto {
        GetConsentTemplateDetailsDto {
            id: None,
            name: None,
            description: None,
            consent_purpose: None,
            collectables: None,
            fetch_type: None,
            short_id: None,
            created_by: None,
            created_at_utc: None,
            status: None,
            template_type: None,
            data_life: None,
            request_life: None,
            frequency: None,
            identity: None,
            documents: None,
            financials: None,
            health_records: None,
            approved_by: None,
            approved_at_utc: None,
        }
    }
}


