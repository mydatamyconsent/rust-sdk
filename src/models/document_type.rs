/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 */

/// DocumentType : Issuable Document Type details.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DocumentType {
    /// Document Type Identifier.
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "categoryType")]
    pub category_type: crate::models::DocumentCategoryType,
    #[serde(rename = "subCategoryType")]
    pub sub_category_type: crate::models::DocumentSubCategoryType,
    /// Document Type Name. eg: Driving License.
    #[serde(rename = "name")]
    pub name: String,
    /// Document Type Unique Slug. eg: \"in.gov.gj.transport.dl\".
    #[serde(rename = "slug")]
    pub slug: String,
    /// Document Type description. eg: Gujarat State Driving License.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Logo URL of document type.
    #[serde(rename = "logoUrl")]
    pub logo_url: String,
    /// Document search repository service name.
    #[serde(rename = "searchServiceName", skip_serializing_if = "Option::is_none")]
    pub search_service_name: Option<String>,
    /// Document repository service name.
    #[serde(rename = "repositoryServiceName", skip_serializing_if = "Option::is_none")]
    pub repository_service_name: Option<String>,
    /// Supported entity types. eg: Individual, Organization.
    #[serde(rename = "supportedEntityTypes")]
    pub supported_entity_types: Vec<crate::models::SupportedEntityType>,
    /// Name of the document type creator.
    #[serde(rename = "addedBy")]
    pub added_by: String,
    /// Payable amount if document is chargeable. eg: 10.25.
    #[serde(rename = "payableAmount", skip_serializing_if = "Option::is_none")]
    pub payable_amount: Option<f64>,
    /// Payable amount currency. eg: INR, USD etc.,.
    #[serde(rename = "payableAmountCurrency", skip_serializing_if = "Option::is_none")]
    pub payable_amount_currency: Option<String>,
    /// DateTime of approval in UTC timezone.
    #[serde(rename = "approvedAtUtc", skip_serializing_if = "Option::is_none")]
    pub approved_at_utc: Option<String>,
    /// Document type approval status.
    #[serde(rename = "approved")]
    pub approved: bool,
}

impl DocumentType {
    /// Issuable Document Type details.
    pub fn new(id: String, category_type: crate::models::DocumentCategoryType, sub_category_type: crate::models::DocumentSubCategoryType, name: String, slug: String, logo_url: String, supported_entity_types: Vec<crate::models::SupportedEntityType>, added_by: String, approved: bool) -> DocumentType {
        DocumentType {
            id,
            category_type,
            sub_category_type,
            name,
            slug,
            description: None,
            logo_url,
            search_service_name: None,
            repository_service_name: None,
            supported_entity_types,
            added_by,
            payable_amount: None,
            payable_amount_currency: None,
            approved_at_utc: None,
            approved,
        }
    }
}


