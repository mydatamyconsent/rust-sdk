/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FinancialAccount {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "issuer", skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(rename = "logoUrl", skip_serializing_if = "Option::is_none")]
    pub logo_url: Option<String>,
    #[serde(rename = "categoryId", skip_serializing_if = "Option::is_none")]
    pub category_id: Option<String>,
    #[serde(rename = "categoryName", skip_serializing_if = "Option::is_none")]
    pub category_name: Option<String>,
    #[serde(rename = "accountName", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<String>,
    #[serde(rename = "accountLogoUrl", skip_serializing_if = "Option::is_none")]
    pub account_logo_url: Option<String>,
    #[serde(rename = "balance", skip_serializing_if = "Option::is_none")]
    pub balance: Option<String>,
    #[serde(rename = "balanceType", skip_serializing_if = "Option::is_none")]
    pub balance_type: Option<String>,
    #[serde(rename = "isShared", skip_serializing_if = "Option::is_none")]
    pub is_shared: Option<bool>,
    #[serde(rename = "sharedWith", skip_serializing_if = "Option::is_none")]
    pub shared_with: Option<Vec<crate::models::SharedWith>>,
    #[serde(rename = "isReceived", skip_serializing_if = "Option::is_none")]
    pub is_received: Option<bool>,
    #[serde(rename = "expiresAtUtc", skip_serializing_if = "Option::is_none")]
    pub expires_at_utc: Option<String>,
    #[serde(rename = "activities", skip_serializing_if = "Option::is_none")]
    pub activities: Option<Vec<crate::models::Activity>>,
    #[serde(rename = "approvedConsentRequests", skip_serializing_if = "Option::is_none")]
    pub approved_consent_requests: Option<Vec<crate::models::ApprovedConsentRequest>>,
}

impl FinancialAccount {
    pub fn new() -> FinancialAccount {
        FinancialAccount {
            id: None,
            issuer: None,
            logo_url: None,
            category_id: None,
            category_name: None,
            account_name: None,
            account_logo_url: None,
            balance: None,
            balance_type: None,
            is_shared: None,
            shared_with: None,
            is_received: None,
            expires_at_utc: None,
            activities: None,
            approved_consent_requests: None,
        }
    }
}


