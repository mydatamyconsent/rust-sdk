/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TermDepositInformation {
    #[serde(rename = "deposit_type")]
    pub deposit_type: crate::models::TermDepositAccountType,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "currency_code")]
    pub currency_code: String,
    #[serde(rename = "principal_amount")]
    pub principal_amount: f64,
    #[serde(rename = "interest_rate")]
    pub interest_rate: f32,
    #[serde(rename = "interest_payout")]
    pub interest_payout: crate::models::TermDepositInterestPayoutType,
    #[serde(rename = "interest_computation")]
    pub interest_computation: crate::models::TermDepositInterestComputation,
    #[serde(rename = "compounding_frequency")]
    pub compounding_frequency: crate::models::TermDepositCompoundingFrequency,
    #[serde(rename = "interest_periodic_payout_amount")]
    pub interest_periodic_payout_amount: f64,
    #[serde(rename = "interest_on_maturity")]
    pub interest_on_maturity: f64,
    #[serde(rename = "deposit_opening_date")]
    pub deposit_opening_date: String,
    #[serde(rename = "maturity_date")]
    pub maturity_date: String,
    #[serde(rename = "maturity_amount")]
    pub maturity_amount: f64,
    #[serde(rename = "tenure_days")]
    pub tenure_days: i32,
    #[serde(rename = "tenure_months")]
    pub tenure_months: i32,
    #[serde(rename = "tenure_years")]
    pub tenure_years: i32,
}

impl TermDepositInformation {
    pub fn new(deposit_type: crate::models::TermDepositAccountType, description: String, currency_code: String, principal_amount: f64, interest_rate: f32, interest_payout: crate::models::TermDepositInterestPayoutType, interest_computation: crate::models::TermDepositInterestComputation, compounding_frequency: crate::models::TermDepositCompoundingFrequency, interest_periodic_payout_amount: f64, interest_on_maturity: f64, deposit_opening_date: String, maturity_date: String, maturity_amount: f64, tenure_days: i32, tenure_months: i32, tenure_years: i32) -> TermDepositInformation {
        TermDepositInformation {
            deposit_type,
            description,
            currency_code,
            principal_amount,
            interest_rate,
            interest_payout,
            interest_computation,
            compounding_frequency,
            interest_periodic_payout_amount,
            interest_on_maturity,
            deposit_opening_date,
            maturity_date,
            maturity_amount,
            tenure_days,
            tenure_months,
            tenure_years,
        }
    }
}


