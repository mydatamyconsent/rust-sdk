/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UserDocumentDetails {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "categoryType", skip_serializing_if = "Option::is_none")]
    pub category_type: Option<crate::models::DocumentCategoryType>,
    #[serde(rename = "typeId", skip_serializing_if = "Option::is_none")]
    pub type_id: Option<String>,
    #[serde(rename = "typeName", skip_serializing_if = "Option::is_none")]
    pub type_name: Option<String>,
    #[serde(rename = "fullName", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[serde(rename = "identifier", skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(rename = "issuerId", skip_serializing_if = "Option::is_none")]
    pub issuer_id: Option<String>,
    #[serde(rename = "issuerName", skip_serializing_if = "Option::is_none")]
    pub issuer_name: Option<String>,
    #[serde(rename = "storageUrl", skip_serializing_if = "Option::is_none")]
    pub storage_url: Option<String>,
    #[serde(rename = "isQuickAccessEnabled", skip_serializing_if = "Option::is_none")]
    pub is_quick_access_enabled: Option<bool>,
    #[serde(rename = "isOwner", skip_serializing_if = "Option::is_none")]
    pub is_owner: Option<bool>,
    #[serde(rename = "digitalSignatureDetails", skip_serializing_if = "Option::is_none")]
    pub digital_signature_details: Option<Vec<crate::models::DigitalSignature>>,
    #[serde(rename = "ownerId", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
}

impl UserDocumentDetails {
    pub fn new() -> UserDocumentDetails {
        UserDocumentDetails {
            id: None,
            category_type: None,
            type_id: None,
            type_name: None,
            full_name: None,
            identifier: None,
            account_id: None,
            issuer_id: None,
            issuer_name: None,
            storage_url: None,
            is_quick_access_enabled: None,
            is_owner: None,
            digital_signature_details: None,
            owner_id: None,
        }
    }
}


