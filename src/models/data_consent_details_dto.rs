/*
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DataConsentDetailsDto {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "dataLife", skip_serializing_if = "Option::is_none")]
    pub data_life: Option<Box<crate::models::Life>>,
    #[serde(rename = "requesterName", skip_serializing_if = "Option::is_none")]
    pub requester_name: Option<String>,
    #[serde(rename = "requesterLogo", skip_serializing_if = "Option::is_none")]
    pub requester_logo: Option<String>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<crate::models::DataConsentStatus>,
    #[serde(rename = "approvedAtUtc", skip_serializing_if = "Option::is_none")]
    pub approved_at_utc: Option<String>,
    #[serde(rename = "rejectedAtUtc", skip_serializing_if = "Option::is_none")]
    pub rejected_at_utc: Option<String>,
    #[serde(rename = "expiresAtUtc", skip_serializing_if = "Option::is_none")]
    pub expires_at_utc: Option<String>,
    #[serde(rename = "requestedAtUtc", skip_serializing_if = "Option::is_none")]
    pub requested_at_utc: Option<String>,
    #[serde(rename = "identifiers", skip_serializing_if = "Option::is_none")]
    pub identifiers: Option<Box<crate::models::JsonSchema>>,
    #[serde(rename = "documents", skip_serializing_if = "Option::is_none")]
    pub documents: Option<Vec<crate::models::DataConsentDocumentDetailsDto>>,
    #[serde(rename = "financials", skip_serializing_if = "Option::is_none")]
    pub financials: Option<String>,
    #[serde(rename = "healthRecords", skip_serializing_if = "Option::is_none")]
    pub health_records: Option<String>,
}

impl DataConsentDetailsDto {
    pub fn new(id: String) -> DataConsentDetailsDto {
        DataConsentDetailsDto {
            id,
            title: None,
            description: None,
            data_life: None,
            requester_name: None,
            requester_logo: None,
            location: None,
            status: None,
            approved_at_utc: None,
            rejected_at_utc: None,
            expires_at_utc: None,
            requested_at_utc: None,
            identifiers: None,
            documents: None,
            financials: None,
            health_records: None,
        }
    }
}


